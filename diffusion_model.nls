;;Copyright 2014 Hari Sundaram , Kaushik Sarkar, Arizona State University

;;This file is part of NetDemics.

;;NetDemics is free software: you can redistribute it and/or modify
;;it under the terms of the GNU Lesser General Public License as published by
;;the Free Software Foundation, either version 3 of the License, or
;;(at your option) any later version.

;;Foobar is distributed in the hope that it will be useful,
;;but WITHOUT ANY WARRANTY; without even the implied warranty of
;;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;GNU Lesser General Public License for more details.

;;You should have received a copy of the GNU Lesser General Public License
;;along with Foobar.  If not, see <http://www.gnu.org/licenses/>.

;;;;;;;;;;;;;;;;;;;;;;
;;;Diffusion Model;;;;
;;;;;;;;;;;;;;;;;;;;;;

to go
 ;; if no-new-adoption? [stop]
  
  ;if all? turtles [not active?]  [ stop ]   ;; it will stop when there is no more active turtles
  
  ;reset-roundActiveCounts
  reset-weight-sums
  reset-active-neighbors
  reset-total-influence
  reset-consider 
  reset-payoffs
  
  propagate-influence
  
  update-total-influence
  update-threshold                          ;; set the new threshold if the threshold switch is on  
  ;update-costs                              ;; set the new cost
  update-resource                           ;; calculate the resources
  
  make-adoption-decision
  
  set-turtle-color
  
  update-indicators
  
  tick
end

to-report no-new-adoption?
  let new-adoption reduce + array:to-list roundActiveCounts
  ifelse new-adoption = 0
  [report true]
  [report false]
end 

to reset-roundActiveCounts
  set roundActiveCounts array:from-list all-zeros
end

to reset-weight-sums
  ask turtles [
    set weight-sums array:from-list all-zeros
  ]
end

to reset-active-neighbors
  ask turtles [
    set active-neighbors array:from-list all-zeros
  ]
end

to reset-total-influence
  set-total-influence
end

to reset-consider
  ask turtles [
    foreach behav-id-list [
      array:set consider? ? false ; only behaviors crossing the threshold are considered
 
    ]
  ]
end

to reset-payoffs
  ask turtles [
    set payoffs array:from-list all-zeros
  ]
end    



to propagate-influence 
  ask turtles [
    foreach behav-id-list [
      if array:item actives? ?
        [
          ask my-links [
            influence myself ?
            update-active-neighbors myself ?
          ]
        ]
    ]
  ]
end

;; link procedure; influencer influences the other end of the link; link procedure
to influence [influencer behav-id]
  ifelse end1 = influencer [
      let weight end2-weight
      ask end2 [
        let t array:item weight-sums behav-id
        array:set weight-sums behav-id ( t + weight )
      ]
    ]
    [
      let weight end1-weight
      ask end1 [
        let t array:item weight-sums behav-id
        array:set weight-sums behav-id ( t + weight )
      ]
    ]
end


;; link procedure; influencer influences the other end of the link; link procedure
to update-active-neighbors [influencer behav-id]
  ifelse end1 = influencer [
      ask end2 [
        let t array:item active-neighbors behav-id
        array:set active-neighbors behav-id ( t + 1 )
      ]
    ]
    [
      ask end1 [
        let t array:item active-neighbors behav-id
        array:set active-neighbors behav-id ( t + 1 )
      ]
    ]
end

;; decision to turn active or not
to make-adoption-decision
  ask turtles [
    calculate-payoffs
    
    calculate-high-local-influence
    
    run update-turtle-attr
    
    run new-consider
    
    let opt knapsack-decide
    
    if varying-available-resources  [
      reset-actives
    ]
    
    reset-actives
    
    foreach opt [
     array:set actives? ? true
     (run after-adoption ?)
    ]
       
    if varying-available-resources [
      run after-knapsack
    ]
  ]
end

to calculate-high-local-influence
  foreach behav-id-list [
    if array:item total-influence ? >= array:item thresholds ? [
      array:set consider? ? true
    ]
  ]
end
    

;; turtle procedure for adoption decision making
;; employs brute-force search for the knapsack problem
;; ; should implement dynamic programing version of the knapsack algorithm
to-report knapsack-decide 
  let consider-behav-list filter [array:item consider? ?] behav-id-list
  
  let power-set compute-power-set consider-behav-list
  
  let opt [] 
  let max-payoff 0
  
  foreach power-set [
   let total-cost 0

    ifelse cost-varying?[
      foreach ? [
        set total-cost total-cost + (array:item stable-costs ?)
      ]
    ][
      foreach ? [
         set total-cost total-cost + (array:item costs ?)
      ]
    ]  
    
    ifelse total-cost <= remaining-resource[  ;; resource minus the used-resource because the used-resource is sticky  
      let total-payoff 0
      let sum-payoff[] 
      
      foreach ? [
        set total-payoff total-payoff + (array:item payoffs ?)
      ]
      
      if total-payoff > max-payoff [
        set max-payoff total-payoff
        set opt ?
      ]
    ][
    ]
        
  ]
  report opt
end

to-report compute-power-set [list-of-items]
;  ifelse empty? list-of-items [
;    report [[]]
;  ]
;  [
;    let head first list-of-items
;    let rest but-first list-of-items
;   let rest-power-set compute-power-set rest
;    let new-subsets []
;    foreach rest-power-set [
;      set new-subsets sentence new-subsets (list (sentence ? head))
;   ]
;    report sentence rest-power-set new-subsets
;  ]
  
  report compute-power-set-tail-recursive [[]] list-of-items
end

to-report compute-power-set-tail-recursive [list-of-subsets list-of-items]
  ifelse empty? list-of-items [
    report list-of-subsets
  ]
  [
    let head first list-of-items
    let list-of-new-subsets map [sentence ? head] list-of-subsets
    report compute-power-set-tail-recursive (sentence list-of-subsets list-of-new-subsets) (but-first list-of-items)
  ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;Auxiliary Procedures;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; turtle procedure
;; turtle procedure
to set-color
;;  set color 0
;;  let num 0
  
;;  foreach behav-id-list [
;;    if array:item actives? ? [
;;     set color color + (base + ? * step)
;;      set num num + 1
;;    ]
;;  ]
;;  if num > 1 [
;;   set color color + scaling
;;  ]

  ifelse active? [
    set color base
  ]
  [
    set color neutral
  ]
end

to reset-actives
  set actives? array:from-list n-values num-behaviors [false]
end

;; turtle procedure
to-report active?
  foreach behav-id-list [
    if array:item actives? ? [
      report true
    ]
  ]
  report false
end