;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;Parameter Initialization;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

globals [
  costs  ;; costs of each of the behaviors
  costs-backup ;; backs up all costs
  utilities ;; intrinsic benefits from each of the behaviors
  behav-id-list ;; list of behavior ids
  all-zeros ;; a list of length num-behaviors containing zeros
  
  ;; Params added for time varying models
  global-population ;; an extrinsic benefits depends on population for each behavior
  
]

links-own
[
  end1-weight ;; influence weight exerted by the end2 on end1
  end2-weight ;; vice versa
]
turtles-own
[
  node-clustering-coefficient
  
  resource   ;; total resource available to this agent for behavior adoption 
  resource-backup ;; backs up the resource value of each agent while running the spread based seedselection simulations
  stable-costs   ;; this is the change in cost of each resource
  weekly-resource ;; this is the weekly resource for a node
  
  thresholds ;; thresholds of adoption for each possible behavior
  thresholds-backup ;; this is a backup for thresholds
  
  actives?   ;; whether this agent is active or not for the particular behavior
  weight-sums ;; used to sum up influence weight from active neighbors
  payoffs    ;; payoff from each of the the behaviors
  consider?  ;; boolean array for indicating whether a behavior will be considered for adoption or not
  total-influence ;; array; influece (either local or sum of local and global) for each behavior
  
  ;; Params added for Time Varying models
  recovered-durations ;; array for duration per behavior going to be in incuation
  remaining-recovered-duration ;; an array to keep a track of the remaining incubation duration
 
  infected-durations   ;; an array of durations per behavior which are sticky
  remaining-infected-duration ;; an array to keep a track of the remaining duration
  state ;; an array which stores state (i.e. S, I or R) of the turtle wrt each behavior
  remaining-resource ;; total resource available to agent at that point of time
  
  positive-global-effect? ;;an array which shows how a change in threshold will be taken of an individual, positively or negatively.
]

to set-behaviors
  ;set costs array:from-list n-values num-behaviors [random-float 1]
  ;set utilities array:from-list n-values num-behaviors [random-float 1]
  ;set durations in duration array
  
  set costs read-from-string behavior-costs
  ifelse is-list? costs [
    set costs array:from-list costs
    set costs-backup array:from-list array:to-list costs
  ]
  [
    user-message "Input behaivor costs as a list i.e. within []"
    stop
  ]
  
  set utilities read-from-string behavior-utilities
  ifelse is-list? utilities [
    set utilities array:from-list utilities
  ]
  [
    user-message "Input behavior utilities as a list i.e. within []"
    stop
  ]
  
  set behav-id-list n-values num-behaviors [?]
  set all-zeros n-values num-behaviors [0]
  set global-population n-values num-behaviors [0]  ;; initialize all global-population to zeros
end

;; sets edge weights such that sum of incoming edge weights equal to 1,
;; and each incoming edge for an agent has same weight
to set-edge-weights
  ask turtles [
    if count my-links != 0 [
      let weight 1.0 / count my-links
      ask my-links [
        set-weight myself weight
      ]
    ]
  ]
end

;; set the remaining duration to all zeros

to set-remaining-infected-duration
  ask turtles [
    set remaining-infected-duration array:from-list all-zeros
  ]
end

;; set the remaining incubation duration to all zeros

to set-remaining-recovered-duration
  ask turtles [
    set remaining-recovered-duration array:from-list all-zeros
  ]
end

;; set individual duration for each agent
to set-infected-durations
  let durationmeanlist read-from-string behavior-durations-mean
  let durationsdlist read-from-string behavior-durations-sd
  let durationlist n-values num-behaviors [0]
  let normal-variable n-values num-behaviors [0]

  ask turtles [
  (foreach durationmeanlist durationsdlist behav-id-list [
    set normal-variable random-normal ?1 ?2
    set durationlist replace-item ?3  durationlist round normal-variable ])
  
    set infected-durations array:from-list durationlist
  ]
  
end

;; set individual incubationduration for each behavior
to set-recovered-durations
  let incubationdurationlist read-from-string behavior-recovered-duration
  ifelse is-list? incubationdurationlist [
   ask turtles [
        set recovered-durations array:from-list incubationdurationlist
               ]
  ][
    user-message "Input behaivor incubation durations as a list i.e. within []"
    stop
      ]
   
end

;; set individual behavior-dropped states for each agent
to set-state
  ask turtles [
    set state array:from-list n-values num-behaviors ["S"]
  ]
end


;; link procedure
to set-weight [node weight]
  ifelse end1 = node [
    set end1-weight weight
  ]
  [
    set end2-weight weight
  ]
end 

;; set individual resources for each agent
to set-resource
  ifelse varying-available-resources [
    set-weekly-resource
  ]
  [
    ask turtles [
      set resource random-float 1
    ]
  ]
end

;; set individual remaining-resources for each agent
to set-remaining-resource
  ask turtles [
    ifelse varying-available-resources [
      set remaining-resource array:item weekly-resource 1
    ][
    set remaining-resource resource
    ]
  ]
end

;; set individual active states for each agent
to set-actives
  ask turtles [
    set actives? array:from-list n-values num-behaviors [false]
  ]
end


;; set individual positive-global-effect states for each agent
to set-positive-global-effect
  ask turtles [
    set positive-global-effect? array:from-list n-values num-behaviors [true]  
  ]
 update-positive-global-effect
end

to update-positive-global-effect
  ask turtles [
    foreach behav-id-list[
      let temp-var random-float 1
      ifelse temp-var <= positive-effect-probability [
        array:set positive-global-effect? ? true
      ][
      array:set positive-global-effect? ? false    
      ]
    ]
  ]
end

;; set the costs for each behavior
to set-stable-costs
  ask turtles [
    set stable-costs costs ;;array:from-list array:to-list costs
  ]
end



;; set agent thresholds before every run 
to set-thresholds 
  ifelse matched-threshold? [
    ask turtles [
      let thresh random-float 1
      set thresholds array:from-list n-values num-behaviors [thresh]
    ]
  ]
  [   
    ask turtles [
      set thresholds  array:from-list n-values num-behaviors [random-float 1]
      set thresholds-backup array:from-list array:to-list thresholds
    ]
  ]
end

; set weight-sum for the behaviors to zero
to set-weight-sums
  ask turtles [
    set weight-sums array:from-list all-zeros
  ]
end

to set-total-influence
  ask turtles [
    set total-influence array:from-list all-zeros
  ]
end

; set agent payoffs for all the behaviors
to set-payoffs
  ask turtles [
    set payoffs array:from-list all-zeros
  ]
end

; set the consider? boolean array
to set-consider
  ask turtles [
    set consider? array:from-list n-values num-behaviors [false]
  ]
end