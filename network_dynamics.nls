
;;;;;;;;;;;;;;;;;;;;;SIvRS Model;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; turtel procedure
to after-adoption-SIvRS [b-id]
  if array:item state b-id = "S" [
    array:set remaining-infected-duration b-id (array:item infected-durations b-id)
  ]
  array:set state b-id "V"
end

;; turtle procedure
to new-consider-SIvRS 
  foreach behav-id-list [
    ifelse varying-available-resources [  
      array:set consider? ? ((array:item consider? ? and array:item state ? != "R") or (array:item state ? = "D") or (array:item state ? = "V"))
    ][
    array:set consider? ? ((array:item consider? ?) and (array:item state ? = "S"))
    ]
  ]
end

;;turtle procedure
to update-turtle-attr-SIvRS
  foreach behav-id-list [
    ifelse array:item state ? = "V" [                                        ;; check for nodes with either volatile state or dormant behaviors
      ifelse array:item remaining-infected-duration ? = 0 [
        array:set state ? "R"
        array:set actives? ? false
        array:set remaining-recovered-duration ? (array:item recovered-durations ?)
      ]
      [
        array:set remaining-infected-duration ? (array:item remaining-infected-duration ? - 1)
        update-costs ?                                                        ;; this function updates the behavior cost for each individual 
      ]
    ]
    [
      if array:item state ? = "R" [
        ifelse array:item remaining-recovered-duration ? = 0 [
          array:set state ? "S"
        ]
        [
          array:set remaining-recovered-duration ? (array:item remaining-recovered-duration ?) - 1
        ]
      ]
    ]
  ]
end

;; turtle procedure
to after-knapsack-SIvRS
  foreach behav-id-list[
    if not array:item actives? ? [
      if array:item state ? = "V" [
        array:set state ?  "D"
      ]                                             ;; Put the node in dormant state
    ]
  ]    
end

;;;;;;;;;;;;;;;;;;;;;SIRS Model;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; turtel procedure
to after-adoption-SIRS [b-id]
  if array:item state b-id = "S" [
    array:set remaining-infected-duration b-id (array:item infected-durations b-id)
  ]
  array:set state b-id "I"
  set remaining-resource remaining-resource - (array:item costs b-id)
end

;; turtle procedure
to new-consider-SIRS 
  foreach behav-id-list [
    ifelse varying-available-resources [  
      array:set consider? ? ((array:item consider? ? and array:item state ? = "S") or (array:item state ? = "D") or (array:item state ? = "I"))
    ][
    array:set consider? ? ((array:item consider? ?) and (array:item state ? = "S"))
    ]
  ]
end

;;turtle procedure
to update-turtle-attr-SIRS
  foreach behav-id-list [
    ifelse array:item state ? = "I" [                               
      ifelse array:item remaining-infected-duration ? = 0 [
        array:set state ? "R"
        array:set actives? ? false
        array:set remaining-recovered-duration ? (array:item recovered-durations ?)
        set remaining-resource remaining-resource + (array:item costs ?)
      ]
      [
        array:set remaining-infected-duration ? (array:item remaining-infected-duration ? - 1)
        update-costs ? 
      ]
    ]
    [
      if array:item state ? = "R" [
        ifelse array:item remaining-recovered-duration ? = 0 [
          array:set state ? "S"
        ]
        [
          array:set remaining-recovered-duration ? (array:item remaining-recovered-duration ?) - 1
        ]
      ]
    ]
  ]
end

;; turtle procedure
to after-knapsack-SIRS
  foreach behav-id-list[
    if not array:item actives? ? [
      if array:item state ? = "I" [
        array:set state ?  "D"
      ]                                             ;; Put the node in dormant state
    ]
  ]  
end

;;;;;;;;;;;;;;;;;;;;;SIR Model;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; turtel procedure
to after-adoption-SIR [b-id]
  if array:item state b-id = "S" [
    array:set remaining-infected-duration b-id (array:item infected-durations b-id)
  ]
  array:set state b-id "I"
  set remaining-resource remaining-resource - (array:item costs b-id)
end

;; turtle procedure
to new-consider-SIR 
  foreach behav-id-list [
    ifelse varying-available-resources [  
      array:set consider? ? ((array:item consider? ? and array:item state ? != "R") or (array:item state ? = "D") or (array:item state ? = "I"))
    ][
    array:set consider? ? ((array:item consider? ?) and (array:item state ? = "S"))
    ]
  ]
end

;;turtle procedure
to update-turtle-attr-SIR
  foreach behav-id-list [
    if array:item state ? = "I"[
      ifelse array:item remaining-infected-duration ? = 0 [
        array:set state ? "R"
        array:set actives? ? false
        set remaining-resource remaining-resource + (array:item costs ?)
      ]
      [
        array:set remaining-infected-duration ? (array:item remaining-infected-duration ? - 1)
        update-costs ? 
      ]
    ]
  ]
end

;; turtle procedure
to after-knapsack-SIR                                 
  foreach behav-id-list[
    if not array:item actives? ? [
      if array:item state ? = "I" [
        array:set state ?  "D"
      ]                                             ;; Put the node in dormant state
    ]
  ]
end


;;;;;;;;;;;;;;;;;;;;;Sticky Behavior SIVS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    
;; V (Velnerable) denotes the state where a behavior has crossed its mandatory infection period, but it
;; will be considered for knap-sack for the next time step

;; turtel procedure
to after-adoption-sticky [b-id]
  array:set state b-id "I"
  array:set remaining-infected-duration b-id (array:item infected-durations b-id)
  set remaining-resource remaining-resource - (array:item costs b-id)
end

;; turtle procedure
to new-consider-sticky 
  foreach behav-id-list [
    array:set consider? ? ((array:item consider? ?) and (array:item state ? = "S")) or (not (array:item state ? = "V"))
  ]
end

;;turtle procedure
to update-turtle-attr-sticky
    foreach behav-id-list [
    if array:item state ? = "I" [
      ifelse array:item remaining-infected-duration ? = 0 [
        array:set state ? "V"
        set remaining-resource remaining-resource + (array:item costs ?)
      ]
      [
        array:set remaining-infected-duration ? (array:item remaining-infected-duration ? - 1)
        update-costs ? 
      ]
    ]
  ]
end

;; turtle procedure
to after-knapsack-sticky
      if varying-available-resources [                                    ;; Update the knapsack when there is a resource variation
    set actives? array:from-list n-values num-behaviors [false]
    foreach behav-id-list[
      if not array:item actives? ?[
        array:set state ? "D"                                             ;; Put the node in dormant state
      ]
    ]
  ]
  
end

;;;;;;;;;;;;;;;;;;;;;None SVS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    
;; V (Velnerable) denotes the state where a behavior has crossed its mandatory infection period, but it
;; will be considered for knap-sack for the next time step

;; turtel procedure
to after-adoption-none [b-id]
  array:set state b-id "V"
end

;; turtle procedure
to new-consider-none 
  foreach behav-id-list [
    array:set consider? ? ((array:item consider? ?) or (array:item actives? ?))
  ]
end

;;turtle procedure
to update-turtle-attr-none

end

;; turtle procedure
to after-knapsack-none
  if varying-available-resources [                                    ;; Update the knapsack when there is a resource variation
      foreach behav-id-list[
        if not array:item actives? ?[
        array:set state ? "S"
      ]
      ]
    ]
end
  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Global Influence::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

to update-total-influence
  ask turtles [
    ifelse global-influence? [
      foreach behav-id-list [
        ifelse array:item positive-global-effect? ? [
          array:set total-influence ? (min (list (array:item weight-sums ? + array:item global-population ?) 1))
        ]
        [
          array:set total-influence ? (max (list (array:item weight-sums ? - array:item global-population ?) 0))
        ]
      ]
    ]
    [
      set total-influence array:from-list (array:to-list weight-sums)
    ]
  ]
end  
  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Varying Threshold ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; turtle procedure to update thresholds
to update-threshold
 ; let alpha 0.4
  ;let constant 10
  ask turtles[
    if threshold-varying? [
      foreach behav-id-list [
        let temp-threshold 0
        ;;;; OLD EQUATION
        ;let stable-threshold (array:item thresholds-backup ? - alpha)
        ;set temp-threshold  (alpha * exp ( 0 - (constant * array:item global-population ?) ) + stable-threshold )
        ;; NEW EQUATION
        set temp-threshold  (array:item thresholds-backup ? - array:item global-population ? * alpha)        
        ifelse array:item positive-global-effect? ? [          
          array:set thresholds ? temp-threshold
        ]
        [
          set temp-threshold  (array:item thresholds-backup ? + array:item global-population ? * alpha) 
          array:set thresholds ? temp-threshold
        ]
      ]   
    ]
  ]

end 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Varying Adoption Costs ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; turtle procedure to update costs
to update-costs [behav-id]
  ;let constant 10
  array:set tick-counter behav-id (array:item tick-counter behav-id + 1)   ;; increament the tick-counter by 1
    if cost-varying? [
       ; let alpha 0.1;
        let temp-costs 0
        let base-cost (array:item costs-backup behav-id - alpha)
        set temp-costs  (alpha * exp ( 0 - (constant * array:item tick-counter behav-id) ) + base-cost )
        array:set stable-costs behav-id temp-costs
    ]
end 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Varying Resources ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; turtle prodecude to update resource, it is based of time. calcuating using the tick and if the modulus fall within [1 -5] then weekdays having less resource. 
;; If the modulus is falling within [6,7] , then considering it as the weekend and will have more resource. 
to update-resource
  if varying-available-resources [
    let timestamp ticks mod 7
    ask turtles[ 
      set resource array:item weekly-resource timestamp
      set remaining-resource resource
     ; foreach behav-id-list[
      ;  if array:item actives? ? [
       ;   set remaining-resource remaining-resource - (array:item costs ?)
        ;]
      ;] 
    ]  
  ]
end



;; set individual weekly resources for each agent
to set-weekly-resource   
   ask turtles [
     let weekly-resource-temp n-values 7 [0]                          ;; initialize the weekly-resource with random number from 0 to 1
    
     let start 0
     if not synchronized? [                                           ;; this switch controls if the maximum resource will be present on first two days or any other consecutive days
       set start random 7
     ]
     
     let y ( 3.5 * ( 1 - weekend-resource-availability) / 5 )         ;; refer to info part for details about this procedure
     let x weekend-resource-availability * 3.5 
     
     (foreach [0 1][
       set weekly-resource-temp replace-item ((? + start) mod 7) weekly-resource-temp (( x - 1 ) + random-float (2 - x)) ] )
     (foreach [2 3 4 5 6][
       set weekly-resource-temp replace-item ((? + start) mod 7) weekly-resource-temp  random-float (2 * y)  ] )

     set weekly-resource array:from-list weekly-resource-temp
     set resource array:item weekly-resource 0    
   ]                        ;; to set the resource for first day of the week
   
end

