;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;Simulation Loop (Like BehaviorSpace);;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

globals [
  ;; go-bspace statistics
  total-part-mean
  total-part-sd
  total-adopt-mean
  total-adopt-sd
  act-counts-mean
  act-counts-sd
  util-mean
  util-sd
  
  ;;stores the seed sets for go-bspace
  seed-sets
]
  

to go-bspace
  ;set average-spread 0
  ;set sd-spread 0
  setup-stats
  let rand-seed rand-seed-threshold
  ;let num-samples-for-spread-estimation 1000
  repeat num-samples-for-spread-estimation [
    mock-setup rand-seed
    set rand-seed rand-seed + 1
    let step-count 0
    while [(not no-new-adoption?) and (step-count < max-step)] [
      mini-go
      set step-count step-count + 1
    ] 
    ;let spread-est count turtles with [active?]
    ;set average-spread average-spread + spread-est
    ;set sd-spread sd-spread + (spread-est * spread-est)
    update-stats
  ]
  ;set average-spread average-spread / num-samples-for-spread-estimation
  ;set sd-spread sd-spread / num-samples-for-spread-estimation
  ;set sd-spread sqrt (sd-spread - (average-spread * average-spread))
  finalize-stats num-samples-for-spread-estimation
end

to mini-go
  reset-roundActiveCounts
  reset-weight-sums
  reset-consider
  reset-payoffs
  
  propagate-influence
  make-adoption-decision
  
  update-indicators
  
  tick
end

to mock-setup [rand-seed]
  set-actives
  set-neutral-color
  set-seeds-active seed-sets
  random-seed 1234567 + rand-seed
  set-thresholds
  setup-indicators
  
  reset-ticks
end

to setup-stats
  set total-part-mean 0
  set total-part-sd 0
  set total-adopt-mean 0
  set total-adopt-sd 0
  set util-mean 0
  set util-sd 0
  set act-counts-mean array:from-list all-zeros
  set act-counts-sd array:from-list all-zeros
end
  
to update-stats
  set total-part-mean total-part-mean + total-active-count
  set total-part-sd total-part-sd + (total-active-count * total-active-count)
  set total-adopt-mean total-adopt-mean + total-unique-active-count
  set total-adopt-sd total-adopt-sd + (total-unique-active-count * total-unique-active-count)
  set util-mean util-mean + utilization
  set util-sd util-sd + (utilization * utilization)
  foreach behav-id-list [
    array:set act-counts-mean ? (array:item act-counts-mean ?) + (array:item active-counts ?)
    array:set act-counts-sd ? (array:item act-counts-sd ?) + (array:item active-counts ?) * (array:item active-counts ?)
  ]
end 

to finalize-stats [n]
  set total-part-mean total-part-mean / n
  set total-part-sd total-part-sd / n
  ifelse total-part-sd > (total-part-mean * total-part-mean) [
    set total-part-sd sqrt (total-part-sd - (total-part-mean * total-part-mean))
  ]
  [
    set total-part-sd 0
  ]
  
  set total-adopt-mean total-adopt-mean / n
  set total-adopt-sd total-adopt-sd / n
  ifelse total-adopt-sd > (total-adopt-mean * total-adopt-mean) [
    set total-adopt-sd sqrt (total-adopt-sd - (total-adopt-mean * total-adopt-mean))
  ]
  [
    set total-adopt-sd 0
  ]
  
  set util-mean util-mean / n
  set util-sd util-sd / n
  ifelse util-sd > (util-mean * util-mean) [
    set util-sd sqrt (util-sd - (util-mean * util-mean))
  ]
  [
    set util-sd 0
  ]
  
  foreach behav-id-list [
    array:set act-counts-mean ? (array:item act-counts-mean ?) / n
    array:set act-counts-sd ? (array:item act-counts-sd ?) / n
    array:set act-counts-sd ? sqrt ((array:item act-counts-sd ?) - (array:item act-counts-mean ?) * (array:item act-counts-mean ?))
  ]
end
